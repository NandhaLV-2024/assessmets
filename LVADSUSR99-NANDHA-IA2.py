# -*- coding: utf-8 -*-
"""LVADSUSR99-NANDHA SP-IA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ulWZXMSglpW0sQaeJXraED2Jme5sXatm
"""

#1
import pandas as pd
import numpy as np

rgb_image = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
                      [[255, 255, 0], [255, 0, 255], [0, 255, 255]],
                      [[127, 127, 127], [200, 200, 200], [50, 50, 50]]])
R = rgb_image[:, :, 0]
G = rgb_image[:, :, 1]
B = rgb_image[:, :, 2]

grayscale_image = 0.2989 * R + 0.5870 * G + 0.1140 * B
print(grayscale_image)

#2
def data(person_no, attributes):
    healthdata = np.random.normal(loc=0, scale=1, size=(person_no,attributes))
    normalized_data = (healthdata - np.mean(healthdata, axis=0)) / np.std(healthdata, axis=0)
    return normalized_data

person_no = 10
attributes = 3
health_datagen =data(person_no,attributes)
print(health_datagen[:2])

#3
import pandas as pd
import numpy as np
data = np.array([[[1, 2, 3], [4, 5, 6]],
                        [[7, 8, 9], [10, 11, 12]],
                        [[13, 14, 15], [16, 17, 18]]])


data_flat = data.reshape(data.shape[0], -1)

reshaped_data = data_flat.reshape(data.shape[0], -1)

print("Original data shape:", data.shape)
print("Flattened data shape:", data_flat.shape)
print("Reshaped data shape:", reshaped_data.shape)
print("Reshaped data:", reshaped_data)

#4
import pandas as pd
import numpy as np
scores = np.array([[80, 45, 90, 95],
                   [70, 75, 29, 85],
                   [100, 98, 80, 120]])
print(scores)
FG_scores = scores[:, 0]
LG_scores = scores[:, -1]
improvement = LG_scores - FG_scores
for i, imp in enumerate(improvement):
    print(f"Athlete {i+1}: Improvement = {imp}")

#5
import pandas as pd
import numpy as np
scores = np.array([[80, 85, 90, 95, -1],[70, 75, 80, -1, 85], [90, 85, 80, 75, 95]])
mask_exempt = scores != -1
last_three_scores = scores[:, -3:]
average_scores = np.sum(last_three_scores * mask_exempt[:, -3:], axis=1) / np.sum(mask_exempt[:, -3:], axis=1)
for i, avg_score in enumerate(average_scores):
    print(f"Student {i+1}: Average Score in Last Three Subjects = {avg_score}")

#6
import pandas as pd
import numpy as np
def data_adjustment_factors(city_temp, adjustment_factors):
    adjustment_factors = adjustment_factors[:, np.newaxis]
    adjusted_temperatures = city_temp + adjustment_factors
    return adjusted_temperatures
city_temp = np.array([[20, 25, 30],
                               [15, 20, 25],
                               [25, 30, 35]])

adjustment_factors = np.array([1, 0.5, -0.5])

adjusted_temperatures = data_adjustment_factors(city_temp, adjustment_factors)

print("Original temperatures:",city_temp )
print("\nAdjusted temperatures:", adjusted_temperatures)

#7
import pandas as pd
import numpy as np
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
    'Age': [25, 30, 35, 40, 45, 50, 55],
    'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
    'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']}

df = pd.DataFrame(data)
filtered_df = df[(df['Age'] < 45) & (df['Department'] != 'HR')]
result = filtered_df[['Name', 'City']]
result = result.to_dict(orient='records')
print(result)

#8
import pandas as pd
import numpy as np
data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}

df = pd.DataFrame(data)
df2 = df[df['Category'] == 'Fruit']
average_price_fruit = df2['Price'].mean()
potential_candidates = df2[(df2['Price'] > average_price_fruit) & (df2['Promotion'])]
print(potential_candidates[['Product', 'Price']])

#9
import pandas as pd
import numpy as np

employee_data = {'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']}
project_data = {    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']}
employee_df = pd.DataFrame(employee_data)
project_df = pd.DataFrame(project_data)
merged = pd.merge(project_df, employee_df, on='Employee', how='left')
merged['Department'].fillna('Unassigned', inplace=True)
merged['Manager'].fillna('No Manager', inplace=True)
print(merged)

#10
import pandas as pd
import numpy as np
data = {'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
    'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Sales': [70000, 50000, 30000, 40000, 60000]
}
df = pd.DataFrame(data)
dep_sales = df.groupby('Department')['Sales'].sum()
dep_counts = df['Department'].value_counts()
average_sales_per_salesperson = dep_sales / dep_counts
ranked_dept = average_sales_per_salesperson.sort_values(ascending=False)
print("Average Sales")
print(average_sales_per_salesperson)
print("Rank on Average Sales")
print(ranked_dept)

