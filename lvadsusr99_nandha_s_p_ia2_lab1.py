# -*- coding: utf-8 -*-
"""LVADSUSR99_NANDHA S P_IA2_Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10gJy1clwIHnfE43W3Tu9VnHFKRYNtUV2
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix
from sklearn.preprocessing import MinMaxScaler
import time
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.cluster import KMeans
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

data = pd.read_csv("/content/winequality-red.csv")
data.info()

#Q1
missing_values = data.isnull().sum()
print("Missing Values:\n", missing_values)

Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR = Q3 - Q1

outliers = ((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)
print(outliers)
sns.boxplot(x = "fixed acidity",
    showmeans=True,
    data= data)

plt.title("Boxplot of Fixed Acidity")
plt.xlabel("Fixed Acidity")
plt.ylabel("Value")
plt.show()

data['Age_Income_Ratio'] = data['age'] / data['Annual Income (k$)']
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data[['age', 'Annual Income (k$)', 'Spending Score (1-100)', 'Age_Income_Ratio']])

#Q2
inertia_values = []
silhouette_scores = []
k_values = range(2, 10)

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    inertia_values.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(scaled_data, kmeans.labels_))

plt.plot(k_values, inertia_values, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Curve for Optimal k')
plt.xticks(k_values)
plt.show()

plt.plot(k_values, silhouette_scores, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Scores for Optimal k')
plt.xticks(k_values)
plt.show()

#Q3
optimal_k = 7
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
kmeans.fit(scaled_data)

cluster_labels = kmeans.predict(scaled_data)

silhouette_avg = silhouette_score(scaled_data, cluster_labels)
print("silhouette score: ",silhouette_avg)

#Q4
data['Cluster'] = kmeans.labels_
cluster_profiles = data.groupby('Cluster').mean()
print(cluster_profiles)

#Q5
cluster_centers = kmeans.cluster_centers_
cluster_centers_df = pd.DataFrame(cluster_centers,columns=data.columns[3:])
print("Cluster Centers:")
print(cluster_centers_df)

#Q6
cluster_profiles = data.groupby('Cluster').mean()
print(cluster_profiles)

#Q7
plt.scatter(data['Annual Income (k$)'], data['Spending Score (1-100)'], c=data['Cluster'], cmap='viridis', alpha=0.5)
plt.scatter(cluster_profiles['Annual Income (k$)'], cluster_profiles['Spending Score (1-100)'], marker='x', c='red', s=200, label='Cluster Center')
plt.title('Customer Segmentation')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()