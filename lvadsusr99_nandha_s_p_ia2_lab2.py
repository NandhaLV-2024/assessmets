# -*- coding: utf-8 -*-
"""LVADSUSR99_NANDHA S P_IA2_Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KJhlEENLmzdC5Cnl-JKkWLwEQhzQM7XI
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix
from sklearn.preprocessing import MinMaxScaler
import time
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.cluster import KMeans
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

#Q1
print(data.isnull().sum())
imputer = SimpleImputer(strategy='mean')
data[['fixed acidity', 'residual sugar', 'pH' , 'volatile acidity' , 'citric acid' , 'sulphates','chlorides','free sulfur dioxide' ]] = imputer.fit_transform(data[['fixed acidity', 'residual sugar', 'pH', 'volatile acidity' , 'citric acid' , 'sulphates','chlorides','free sulfur dioxide']])

Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR = Q3 - Q1
outliers = (data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))
data[outliers] = np.where(data[outliers] < (Q1 - 1.5 * IQR), Q1 - 1.5 * IQR, Q3 + 1.5 * IQR)







# f.Model development
k_values = [3, 5, 7, 9]
for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train_scaled, y_train)
    y_pred = knn.predict(X_test_scaled)

    # g. Model Evaluation
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)

    print(f'KNN with K={k}:')
    print(f'Accuracy: {accuracy:.2f}, Precision: {precision:.2f}, Recall: {recall:.2f}')

#Q2
data['quality'] = data['quality'].apply(lambda x: 'bad' if x <= 6 and x>=3 else 'good')

#Q3
label_encoder = LabelEncoder()
data['quality'] = label_encoder.fit_transform(data['quality'])

#Q4
features = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides',
            'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol']
target = 'quality'

#Q5
X_train, X_test, y_train, y_test = train_test_split(data[features], data[target], test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""#Q6
Targeted marketing may be accomplished by focusing on high-value items for individuals in the age range of around 32, since this demographic has the highest spending score.


Products in the right price range can be advertised to the age group clusters in which they fall, increasing the likelihood that a buyer would spend money on that product.

"""