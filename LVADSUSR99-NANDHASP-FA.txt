# -*- coding: utf-8 -*-
"""LVADSUSR99-NANDHA_SP-FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XKf1SyyRi3k8LCXIgBeb6Qv5JAmubhW1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#1
df = pd.read_csv('/content/Walmart_Dataset Python_Final_Assessment.csv')
df.info()

#2
df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Year'] = df['Order Date'].dt.year

df['Ship Date'] = pd.to_datetime(df['Ship Date'])
df['Year_S'] = df['Ship Date'].dt.year
df.info()

missing_values = df.isnull()
missing_count = missing_values.sum()
print("Missing values:")
print(missing_count)

print("_____________________________________________")
print("Duplicate values:")
duplicate_rows = df.duplicated()
duplicate_count = duplicate_rows.sum()
if duplicate_count != 0:
  print(duplicate_count)
else:
  print('NO DUPLICATES')

#3
print("Mean - Sales", df['Sales'].mean())
print("_______________________________________")
print("Median - Sales", df['Sales'].median())
print("_______________________________________")
print("Mode - Sales", df['Sales'].mode())
print("_______________________________________")
print("Range - Sales", df['Sales'].max() - df['Sales'].min())
print("_______________________________________")
print("Variance - Sales", df['Sales'].var())
print("_______________________________________")
print("Standard Deviation - Sales :", df['Sales'].std())
print("_______________________________________")
print("Mean - Quantity ", df['Quantity'].mean())
print("_______________________________________")
print("Median - Quantity", df['Quantity'].median())
print("_______________________________________")
print("Mode - Quantity", df['Quantity'].mode())
print("_______________________________________")
print("Range - Quantity", df['Quantity'].max() - df['Quantity'].min())
print("_______________________________________")
print("Variance - Quantity", df['Quantity'].var())
print("_______________________________________")
print("Standard Deviation - Quantity", df['Quantity'].std())
print("_______________________________________")
print("Mean -  Profit", df['Profit'].mean())
print("_______________________________________")
print("Median - Profit", df['Profit'].median())
print("_______________________________________")
print("Mode - Profit", df['Profit'].mode())
print("_______________________________________")
print("Range - Profit ", df['Profit'].max() - df['Profit'].min())
print("_______________________________________")
print("Variance - Profit", df['Profit'].var())
print("_______________________________________")
print("Standard Profit - Profit", df['Profit'].std())
print("_______________________________________")

#4
plt.figure(figsize=(8, 6))
sns.barplot(x='Category', y='Sales', data=df)
plt.title('Sales by Category')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()
print("_______________________________________")
salesData = df.groupby('Year')['Sales'].sum()
salesData.plot(label='Sales')
profitData = df.groupby('Year')['Profit'].sum()
profitData.plot(label='Profit')
plt.grid(axis = 'x')
plt.legend()
plt.show()
print("_______________________________________")

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Quantity', y='Profit', data=df)
plt.title('Profit vs Quantity')
plt.xlabel('Quantity')
plt.ylabel('Profit')
plt.show()
print("_______________________________________")
plt.figure(figsize=(10, 6))
sns.boxplot(x='Profit', data=df)
plt.title('Profit Distribution')
plt.xlabel('Profit')
plt.tight_layout()
plt.show()

#5
df.corr()
sns.heatmap(df.corr())

#6
num_columns = ['Sales', 'Quantity', 'Profit']
df_marks = df[num_columns].apply(lambda x: np.abs((x - x.mean()) / x.std()))

Outers = df_marks > 3

Outers_data = df[Outers.any(axis=1)]

print("Outers:")
print(Outers_data)
plt.figure(figsize=(10, 8))
sns.boxplot(data=df[num_columns])
plt.title('Boxplot of Sales, Quantity, and Profit')
plt.xlabel('Features')
plt.ylabel('Values')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

df1 = df.groupby('EmailID')['Order ID'].count().to_frame('No_of_Orders')
customer_order_count = df1.sort_values(by='No_of_Orders', ascending=False)
top_5_customers = customer_order_count.head(5)
print('top 5 customers based on Orders:', top_5_customers)

df2 = df.groupby('EmailID')['Sales'].count().to_frame('Sales_count')
customer_order_count = df2.sort_values(by='Sales_count', ascending=False)
top_5_customers = customer_order_count.head(5)
print('top 5 customers based on Sales:', top_5_customers)

#7 - i)
df['Order Month'] = pd.to_datetime(df['Order Date']).dt.month
salesData = df.groupby('Year')['Sales'].sum()
salesData.plot(label='Sales')
profitData = df.groupby('Year')['Profit'].sum()
profitData.plot(label='Profit')
plt.grid(True)
plt.legend()
plt.show()

salesData = df.groupby('Order Month')['Sales'].sum()
salesData.plot(label='Sales')
profitData = df.groupby('Order Month')['Profit'].sum()
profitData.plot(label='Profit')
plt.grid(True)
plt.legend()
plt.show()

#7 - ii)
total_sales = df.groupby(['Year', 'Category'])['Sales'].sum().reset_index()
total_sales['Growth'] = total_sales.groupby('Category')['Sales'].pct_change() * 100
most_growth_category = total_sales.groupby('Category')['Growth'].mean().idxmax()
print("Category with the Most Growth in Sales:", most_growth_category)

#7 -i)
df1 = df.groupby('EmailID')['Order ID'].count().to_frame('No_of_Orders')
customer_order_count = df1.sort_values(by='No_of_Orders', ascending=False)
top_5_customers = customer_order_count.head(5)
print('top 5 customers based on Orders:', top_5_customers)

df2 = df.groupby('EmailID')['Sales'].count().to_frame('Sales_count')
customer_order_count = df2.sort_values(by='Sales_count', ascending=False)
top_5_customers = customer_order_count.head(5)
print('top 5 customers based on Sales:', top_5_customers)

#7-ii)
df['OrderDate'] = pd.to_datetime(df['Order Date'])
df.sort_values(by=['EmailID', 'Order Date'], inplace=True)
df['TimeBet_Orders'] = df.groupby('EmailID')['Order Date'].diff()
average_time_between_orders = df.groupby('EmailID')['TimeBet_Orders'].mean()

print("Average Time Between Orders for Each Customer:")
print(average_time_between_orders)
print(average_time_between_orders.mean())

"""# **Comprehensive Analysis**"""

#1

df['Timegap'] = df['Ship Date'] - df['Order Date']
average_time_between_order_and_delivery = df.groupby('Category')['Timegap'].mean()
print(average_time_between_order_and_delivery)

df['Timegap'] = df['Ship Date'] - df['Order Date']
average_time_between_order_and_delivery = df.groupby('EmailID')['Timegap'].mean()
print(average_time_between_order_and_delivery.mean())

"""# Insights:-

i) Orders are currently shipped out on average in eight days and twenty hours.For the delivery of tables, it stands highest. A more efficient way to arrange transporters might involve allocating larger trucks, which would enhance the supply chain.

"-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"

ii) A number of variables, including local regulations, cultural preferences, economic situations, and demography (age and income), affect the geographic distribution of sales. By enabling firms to customize products, pricing, promotions, and advertising techniques to particular geographies, demographics, and consumer habits, tailored marketing can be informed by these aspects and lead to improved customer engagement and sales success.
"""

#2

customer_order_amt = df.groupby('EmailID')['Sales'].sum().reset_index()
top_10 = int(len(customer_order_amt) * 0.1)
high_value_cust = customer_order_amt.nlargest(top_10, 'Sales')
print(high_value_cust)


customer_order_amt = df.groupby('EmailID')['Quantity'].sum().reset_index()
top_10 = int(len(customer_order_amt) * 0.1)
high_value_cust = customer_order_amt.nlargest(top_10, 'Quantity')
print(high_value_cust)

for index, customer in high_value_cust.iterrows():
  pass

"""# Insights:-

High value consumers can be distinguished by the volume, regularity, and value of their purchases. In order to increase client loyalty and increase the likelihood that they will refer Wallmart to other prospective customers, these consumers can receive additional incentives and offers.

"""